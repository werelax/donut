(define
  test-ast
  '(
    (define global 1)

    (let ((a 1)
          (b 2))
      (var jarl "1234")
      (list "nothing" "interesting" "here"))

  (let ((c 112))
    (let ((z 0))
      'fail)
    (defmacro (bingo)
      1))

  ((lambda (x y)
     (let ((hola 1))
       (var jarl "1234")
       (defmacro (bingo2))
       ))
   1 2)))

(define (is-lambda? tree)
  (let ((head (car tree))
        (tail (cdr tree)))
    (if (atom? head)
      false
      (= (car head) "lambda"))))

(define (is-macro? tree)
  (= (car tree) "defmacro"))

(define (is-var? tree)
  (or (= (car tree) "define")
      (= (car tree) "var")))

(define (inspect-lambda tree)
  (let ((definition (car tree))
        (arguments (cdr tree))
        (parameters (cadr definition))
        (body (cddr definition))
        (walked-body (code-walker body)))
    (if (null? walked-body)
      nil
      `((lambda ,parameters ,@walked-body) ,@arguments))))

(define (keep-var tree)
  tree)

(define *macro-marker* '___MACRO_HERE___)

(define (has-macro? tree)
  (if (or (null? tree)
          (atom? tree))
    false
    (or (= (car tree) *macro-marker*)
        (has-macro? (car tree))
        (has-macro? (cdr tree)))))

(define (un-bury tree)
  (if (and (car tree)
           (null? (cdr tree)))
    (car tree)
    tree))

;; Heavy duty

(define (build-macro expr)
  (let ((signature (cadr expr))
        (name (car signature))
        (args (cdr signature))
        (body (cddr expr))
        (macro-function (compile `(lambda ,args ,@body))))
    ;; store the compiled-evaled macro-func in the global macro dictionary
    `(,*macro-marker* ,name ,macro-function)))


(define (code-walker tree)
  (cond
    ((atom? tree) nil)
    ((is-lambda? tree) (inspect-lambda tree))
    ((is-var? tree) (keep-var tree))
    ((is-macro? tree) (build-macro tree))
    (else (let ((all-childs (reduce (lambda (acc leaf)
                                      (let ((childs (code-walker leaf)))
                                        (if (null? childs)
                                          acc
                                          (append childs acc))))
                                    tree
                                    '())))
            (if (has-macro? all-childs)
              (un-bury all-childs)
              nil)))))


(console.log "%j" (code-walker test-ast))
