;; I'm leaving this previous, more CORRECT
;; implementation of (let) just in case the
;; new (faster) one gives troube
;;
;; (define (let_aux bindings body)
;;   ((lambda (symbols values)
;;      `((lambda (,@symbols)
;;          (progn ,@body))
;;        ,@values))
;;      (map car bindings)
;;      (map cadr bindings)))
;;
;; (defmacro (let bindings . body)
;;   (let_aux bindings body))

(define (__faster_let_aux bindings body)
  `((lambda ()
      ,@(map (lambda (binding)
               `(var ,(car binding)
                     ,(cadr binding)))
             bindings)
        (progn ,@body))))

(defmacro (let bindings . body)
  (__faster_let_aux bindings body))

;; Thanks to the cheaty let implementation,
;; it's recursive and self-referential by default!

(defmacro (let_star_ bindings . body)
  `(let ,bindings ,@body))

(defmacro (letrec bindings . body)
  `(let ,bindings ,@body))


;; Utilities

;; Rewrite this as a more general (partition-by 2 list)
;; when we have some kind of (do) macro
(define (in-pairs list)
  (if (null? list)
    nil
    (cons (list (car list) (cadr list))
          (in-pairs (cddr list)))))

(defmacro (doto thing . body)
  (reduce (lambda (acc thing)
            (if (pair? thing)
              `(,(car thing) ,acc ,@(cdr thing))
              `(,thing ,acc)))
          body thing))

