(define (lambda-over-let x)
  (let ((c 3))
    (let ((a 1)
          (b 2))
      (console.log (+ a b)))))

(define (jarl x)
  (let* ((a (lambda (n)
              (if (< 0 n) n (a (+ 1 n)))))
         (b a))
    (console.log (+ a b))
    (console.log "And then some")))

(console.log "H\"EY")

(console.log -1)

(console.log (- 1 2))

;; (letrec ((a (lambda (n)
;;               (if (< 0 n) n (a (+ 1 n))))))
;;   (a -1))

(let* ((a 1)
       (b (+ a 1)))
  (console.log (+ a b)))

(letrec ((a (lambda (n) 
              (if (< n 0)
                n
                (progn
                  (console.log "%s!!" n)
                  (a (- n 1)))))))
  (a 10))
