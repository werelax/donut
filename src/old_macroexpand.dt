(define
  read      (get :read    (require "./reader.js"))
  compile   (get :compile (require "./compiler.js"))
  gensym    (get :gensym  (require "./compiler.js"))
  format    (get :format  (require "util"))
  read-file (get :readFileSync (require "fs")))

;; Load the JS prelude

(eval (read-file "./lib/prelude.js" "utf-8"))

;; Inspect and modify scope

(define (create-scope? expr)
  (case (car expr)
    (("define" "var" "lambda") true)
    (else false)))

;; Just three ways to create contexts:
;; define/var or closures
(define (add-to-scope expr scope)
  (case (car expr)
    (("define" "var") (add-define-to-scope expr scope))
    ("lambda" (add-closure-to-scope expr scope))))

(define (add-symbol-to-scope symbol value scope)
  (let ((current-scope (car scope)))
    (set! (get symbol current-scope) value)))

(define (add-lambda-to-scope symbol params body scope)
  (let ((fn  `(lambda ,params ,@body)))
    (add-symbol-to-scope symbol fn scope)))

(define (add-define-to-scope expr scope)
  (if (pair? (cadr expr))
    ;; lambda
    (let ((signature (cadr expr))
          (body (cddr expr)))
      (add-lambda-to-scope (car signature)
                           (cdr signature)
                           (walk-code value scope false)
                           scope)
      `(define ,signature ,@value))
    ;; symbol-value pairs
    (let* ((pairs (in-pairs (cdr expr)))
      (walked-pairs (map (lambda (pair)
                           (let ((symbol (car pair))
                                 (value (walk-code (cadr pair) scope false)))
                             (add-symbol-to-scope symbol value scope)
                             `(,symbol ,value)))
                         pairs)))
      `(define ,@(flatten walked-pairs)))))

(define (add-closure-to-scope expr scope)
  (let* ((definition (car expr))
         (params (cadr definition))
         (body (cddr definition))
         (vals (map (lambda (v) (walk-code v scope))
                    (cdr expr)))
         (new-scope (cons {} scope)))
    (map (lambda (name value)
           (add-symbol-to-scope name value new-scope))
         params
         vals)
    `((lambda ,params
       ,(walk-code body new-scope true))
      ,@vals)))

;; Scope evaluation context

(define (run-with-scope name expr scope)
  (let ((scope-closure (build-scope scope)))
    (let ((decorate (get :js_beautify (require "js-beautify"))))
      (console.log (format "%s" (decorate (format scope-closure name (compile expr))))))
    (format scope-closure name (compile expr))))

(define (build-scope scope)
  (let ((bindings (last scope)))
    (if bindings
      (let ((keys (get-keys bindings)))
        (let ((kv-pairs (map (lambda (k) (list k (compile (get k bindings))))
                             keys)))
          (format "(function(%s){ return %s; })(%s)"
                  (str-join keys ", ")
                  (build-scope (butlast scope))
                  (str-join (map (lambda (p)
                                (format "(%s=%s)" (car p) (cadr p)))
                              kv-pairs)
                         ", "))))
      "(%s = %s)")))

;; Quoted

(define (is-quoted? expr)
  (and (pair? expr)
       (or (== (car expr "quote"))
           (== (car expr "quasiquote")))))

;; Macro definition

(define *macros* {})

(define (is-macro-definition? expr)
  (and expr
       (eq? (car expr) "defmacro")))

(define (create-macro expr scope)
  (let ((signature (cadr expr)))
    (let ((name (car signature))
          (args (cdr signature))
          (body (walk-code (cddr expr) scope false)))
      (let ((macro-function
              (compile (.concat (list 'lambda args) body))))
        ;; store the compiled-evaled macro-func in the global macro dictionary
        (set! (get name *macros*) (eval (run-with-scope name macro-function scope false))))
      expr)))

;; Macro expansion

(define (is-macro-expansion? expr)
  (and expr
       (some (lambda (macro)
               (eq? macro (car expr)))
             (get-keys *macros*))))

(define (expand-macro expr scope)
  (let ((name (car expr))
        (params (cdr expr)))
    (let ((macro (get name *macros*)))
      (let ((expansion (.apply macro {} params)))
        (let ((expanded-ast (car (walk-code
                                   (list expansion)
                                   scope
                                   false))))
          expanded-ast)))))

;; Another approach

(define (code-walker tree (acc []))
  (cond
    ((or (null? tree)
         (not (pair? tree))) tree)
    ()))

(define (walk-code ast scope scope-aware)
  ;; lets get to the thing!
  (if (or (not (pair? ast))
          (null? ast))
    ast
    (let ((expr (car ast)))
      (let ((next (cond
                    ((and scope-aware (create-scope? expr)) (add-to-scope expr scope))
                    ((is-macro-definition? expr) (create-macro expr scope))
                    ((is-macro-expansion? expr) (expand-macro expr scope))
                    ((is-quoted?) expr)
                    ((pair? expr) (cons (walk-code (car expr) scope scope-aware)
                                        (walk-code (cdr expr) scope scope-aware)))
                    (else expr)))
            (rest (walk-code (cdr ast) scope scope-aware)))
        (cons next rest)))))

(define (macroexpand ast)
  (if ast (walk-code ast (list {}) true) [] true))

;; Exports just macroexpand

(set! (get "macroexpand" exports) macroexpand)
