(define
  read      (get :read    (require "./reader.js"))
  compile   (get :compile (require "./compiler.js"))
  gensym    (get :gensym  (require "./compiler.js"))
  format    (get :format  (require "util"))
  read-file (get :readFileSync (require "fs")))

;; Load the JS prelude

(eval (read-file "./lib/prelude.js" "utf-8"))

;; Inspect and modify scope

(define (create-scope? expr)
  (case (car expr)
    (("define" "let") true)
    (else false)))

(define (add-to-scope expr scope)
  (case (car expr)
    ("define" (add-define-to-scope expr scope))
    ("let" (add-let-to-scope expr scope))))

(define (add-symbol-to-scope symbol value scope)
  (let ((current-scope (car scope)))
    (set! (get symbol current-scope) value)))

(define (add-lambda-to-scope symbol params body scope)
  (let ((fn (.concat (list 'lambda params) body)))
    (add-symbol-to-scope symbol fn scope)))

(define (add-define-to-scope expr scope)
  (let ((symbol (cadr expr))
        (value (walk-code (.slice expr 2))))
    (if (pair? symbol)
      (add-lambda-to-scope (car symbol) (cdr symbol) value scope)
      (add-symbol-to-scope symbol (car value) scope))
    expr))

(define (add-let-to-scope expr scope)
  (let ((header (.slice expr 0 2))
        (definitions (cadr expr))
        (body (.slice expr 2))
        ;; create new scope!
        (new-scope (cons {} scope)))
    (map (lambda (pair)
           (let ((symbol (car pair))
                 (value (car (walk-code (cdr pair)))))
             (add-symbol-to-scope symbol value new-scope)))
         definitions)
    (.concat header (walk-code body new-scope))))

;; Scope evaluation context

(define (run-with-scope name expr scope)
  (let ((scope-closure (build-scope scope)))
    (format scope-closure name (compile expr))))

(define (build-scope scope)
  (let ((bindings (last scope)))
    (if bindings
      (let ((keys (get-keys bindings)))
        (let ((values (map (lambda (k) (compile (get k bindings)))
                           keys)))
          (format "(function(%s){ return %s; })(%s)"
                  (.join keys ", ")
                  (build-scope (butlast scope))
                  (.join values ", "))))
      "(%s = %s)")))

;; Macro definition

(define *macros* {})

(define (is-macro-definition? expr)
  (eq? (car expr) "defmacro"))

(define (create-macro expr scope)
  (let ((signature (cadr expr)))
    (let ((name (car signature))
          (args (cdr signature))
          (body (walk-code (cddr expr) scope)))
      (let ((macro-function
              (compile (.concat (list 'lambda args) body))))
        (console.log (format "CREATED MACRO %s: %s" name macro-function))
        ;; store the compiled-evaled macro-func in the global macro dictionary
        (set! (get name *macros*) (eval (run-with-scope name macro-function scope))))
      expr)))

;; Macro expansion

(define (is-macro-expansion? expr)
  (some (lambda (macro)
          (eq? macro (car expr)))
        (get-keys *macros*)))

(define (expand-macro expr scope)
  (let ((name (car expr))
        (params (map compile
                     (cdr expr))))
    (let ((macro (get name *macros*)))
      (let ((expansion (.apply macro {} params)))
        (let ((expanded-ast (car (walk-code
                                   (list expansion)
                                   scope))))
          expanded-ast)))))

(define (walk-code ast (scope (list {})))
  ;; lets get to the thing!
  (if (null? ast)
    nil
    (let ((expr (car ast)))
      (let ((next (cond
                    ((create-scope? expr) (add-to-scope expr scope))
                    ((is-macro-definition? expr) (create-macro expr scope))
                    ((is-macro-expansion? expr) (expand-macro expr scope))
                    ((pair? expr) (cons (car expr)
                                        (walk-code (cdr expr) scope)))
                    (else expr)))
            (rest (walk-code (cdr ast) scope)))
        (cons next rest)))))

(define (macroexpand ast)
  (if ast (walk-code ast) []))

;; Exports just macroexpand

(set! (get "macroexpand" exports) macroexpand)
