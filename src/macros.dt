(define
  compile   (get :compile (require "./compiler.js"))
  format    (get :format  (require "util"))
  read-file (get :readFileSync (require "fs")))

;; Load the JS prelude

(eval (read-file "./lib/prelude.js" "utf-8"))

;; Globals

(define *macros* {})

;; Predicates

(define (is-var? expr)
  (or (= (car expr) "define")
      (= (car expr) "var")))

(define (is-lambda? expr)
  (let ((head (car expr))
        (tail (cdr expr)))
    (and (pair? head)
         (= (car head) "lambda"))))

(define (is-macro-definition? expr)
  (= (car expr) "defmacro"))

(define (is-macro-expansion? expr)
  (has-key *macros* (car expr)))

(define (is-quoted? expr)
  (or (= (car expr) "quote")
      (= (car expr) "quasiquote")))

;; Expression builders

(define (add-var-to-ctx expr ctx)
  (format ctx (format "%s; %%%%s" (compile expr))))

(define (expand-lambda expr ctx)
  (let ((definition (car expr))
        (args (map macro-walker (cdr expr)))
        (params (cadr definition))
        (body (cddr definition)))
    (let ((new-ctx (format ctx
                           (format "return (function(%s) { %%%s })(%s);"
                                   (str-join params ", ")
                                   (str-join (map compile args) ", "))))
          (new-body (macro-walker body new-ctx)))
      `((lambda ,params ,@new-body) ,@args))))

(define (run-with-context name expr ctx)
  ;; The macro func may call itself recursively!
  (format "(function() { %s })()"
          (format ctx
                  (format "var %s; return %s = %s;"
                          name
                          name
                          (compile expr)))))

(define (compile-macro expr ctx)
  (let ((signature (cadr expr))
        (name (car signature))
        (params (cdr signature))
        (body (macro-walker (cddr expr) ctx))
        (macro-function (compile `(lambda ,params ,@body))))
    (set! (get name *macros*)
          (eval (run-with-context name macro-function ctx))))
  expr)

(define (expand-macro expr ctx)
  (let ((name (car expr))
        (params (cdr expr))
        (macro (get name *macros*))
        (expansion (apply macro params))
        (walked-expansion (macro-walker expansion ctx)))
    walked-expansion))

;; Tree transversing

(define (macro-walker tree (ctx "%s"))
  (cond ((or (atom? tree)
             (null? tree)
             (is-quoted? tree))
         tree)
        ;; Acumulate context horizontaly
        ((is-var? (car tree)) (cons (car tree)
                                    (macro-walker (cdr tree)
                                                  (add-var-to-ctx (car tree)
                                                                  ctx))))
        ;; Acumulate context vertically
        (else (cond
                ((is-lambda? tree) (expand-lambda tree ctx))
                ((is-macro-definition? tree) (compile-macro tree ctx))
                ((is-macro-expansion? tree) (expand-macro tree ctx))
                (else (cons (macro-walker (car tree) ctx)
                            (macro-walker (cdr tree) ctx)))))))

;; Exports

(set! (get :macroexpand exports) macro-walker)
